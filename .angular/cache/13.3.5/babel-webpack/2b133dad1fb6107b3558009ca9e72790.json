{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\nexport var NotificationVisibility = /*#__PURE__*/(() => {\n  (function (NotificationVisibility) {\n    NotificationVisibility[NotificationVisibility[\"Visible\"] = 0] = \"Visible\";\n    NotificationVisibility[NotificationVisibility[\"VisibleNotifyCompleted\"] = 1] = \"VisibleNotifyCompleted\";\n    NotificationVisibility[NotificationVisibility[\"VisibilityHidden\"] = 2] = \"VisibilityHidden\";\n    NotificationVisibility[NotificationVisibility[\"VisibleNotifyOnlyCompletion\"] = 3] = \"VisibleNotifyOnlyCompletion\";\n  })(NotificationVisibility || (NotificationVisibility = {}));\n\n  return NotificationVisibility;\n})();\n\nvar Downloader =\n/** @class */\nfunction (_super) {\n  __extends(Downloader, _super);\n\n  function Downloader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Downloader.prototype.download = function (request) {\n    return cordova(this, \"download\", {}, arguments);\n  };\n\n  Downloader.pluginName = \"Downloader\";\n  Downloader.plugin = \"integrator-cordova-plugin-downloader\";\n  Downloader.pluginRef = \"cordova.plugins.Downloader\";\n  Downloader.repo = \"https://github.com/Luka313/integrator-cordova-plugin-downloader.git\";\n  Downloader.platforms = [\"Android\"];\n\n  Downloader.ɵfac = /*@__PURE__*/function () {\n    var ɵDownloader_BaseFactory;\n    return function Downloader_Factory(t) {\n      return (ɵDownloader_BaseFactory || (ɵDownloader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Downloader)))(t || Downloader);\n    };\n  }();\n\n  Downloader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Downloader,\n    factory: function (t) {\n      return Downloader.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Downloader;\n}(IonicNativePlugin);\n\nexport { Downloader }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZG93bmxvYWRlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFFeEUsTUFBTSxDQUFOLElBQVksc0JBS1g7QUFMRCxXQUFZLHNCQUFzQjtBQUNqQyxJQUFDLHlFQUFXLENBQUE7QUFBQyxJQUNaLHVHQUEwQixDQUFBO0FBQUMsSUFDM0IsMkZBQW9CLENBQUE7QUFBQyxJQUNyQixpSEFBK0IsQ0FBQTtBQUNqQyxDQUFDLEVBTFcsc0JBQXNCLEtBQXRCLHNCQUFzQixRQUtqQztBQUNEO0FBRWEsSUF1R21CLDhCQUFpQjtBQUFDO0FBRTlCO0FBQ2I7QUFBTSxJQUdYLDZCQUFRLGFBQUMsT0FBd0I7QUFJbEI7QUFBMEM7QUFBZ0U7QUFBeUQ7QUFBNkY7OENBWGhSLFVBQVU7Ozs7MEJBQ0w7QUFBQyxxQkFsSFA7QUFBRSxFQWtIOEIsaUJBQWlCO0FBQ2hELFNBRFksVUFBVTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblZpc2liaWxpdHkge1xuICBWaXNpYmxlID0gMCxcbiAgVmlzaWJsZU5vdGlmeUNvbXBsZXRlZCA9IDEsXG4gIFZpc2liaWxpdHlIaWRkZW4gPSAyLFxuICBWaXNpYmxlTm90aWZ5T25seUNvbXBsZXRpb24gPSAzLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvd25sb2FkSHR0cEhlYWRlciB7XG4gIGhlYWRlcjogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlc3RpbmF0aW9uRGlyZWN0b3J5IHtcbiAgZGlyVHlwZTogc3RyaW5nO1xuICBzdWJQYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG93bmxvYWRSZXF1ZXN0IHtcbiAgLyoqXG4gICAqIExvY2F0aW9uIG9mIHRoZSByZXNvdXJjZSB0byBkb3dubG9hZFxuICAgKi9cbiAgdXJpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdGl0bGUgb2YgdGhpcyBkb3dubG9hZCwgdG8gYmUgZGlzcGxheWVkIGluIG5vdGlmaWNhdGlvbnMgKGlmIGVuYWJsZWQpLlxuICAgKiBJZiBubyB0aXRsZSBpcyBnaXZlbiwgYSBkZWZhdWx0IG9uZSB3aWxsIGJlIGFzc2lnbmVkIGJhc2VkIG9uIHRoZSBkb3dubG9hZCBmaWxlbmFtZSwgb25jZSB0aGUgZG93bmxvYWQgc3RhcnRzLlxuICAgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTZXQgYSBkZXNjcmlwdGlvbiBvZiB0aGlzIGRvd25sb2FkLCB0byBiZSBkaXNwbGF5ZWQgaW4gbm90aWZpY2F0aW9ucyAoaWYgZW5hYmxlZClcbiAgICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogU2V0IHRoZSBNSU1FIGNvbnRlbnQgdHlwZSBvZiB0aGlzIGRvd25sb2FkLiBUaGlzIHdpbGwgb3ZlcnJpZGUgdGhlIGNvbnRlbnQgdHlwZSBkZWNsYXJlZCBpbiB0aGUgc2VydmVyJ3MgcmVzcG9uc2UuXG4gICAqL1xuICBtaW1lVHlwZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFNldCB3aGV0aGVyIHRoaXMgZG93bmxvYWQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgc3lzdGVtJ3MgRG93bmxvYWRzIFVJLiBUcnVlIGJ5IGRlZmF1bHQuXG4gICAqL1xuICB2aXNpYmxlSW5Eb3dubG9hZHNVaT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250cm9sIHdoZXRoZXIgYSBzeXN0ZW0gbm90aWZpY2F0aW9uIGlzIHBvc3RlZCBieSB0aGUgZG93bmxvYWQgbWFuYWdlciB3aGlsZSB0aGlzIGRvd25sb2FkIGlzIHJ1bm5pbmcgb3Igd2hlbiBpdCBpcyBjb21wbGV0ZWQuXG4gICAqL1xuICBub3RpZmljYXRpb25WaXNpYmlsaXR5PzogTm90aWZpY2F0aW9uVmlzaWJpbGl0eTtcbiAgLyoqXG4gICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUgdG8gYSBwYXRoIHdpdGhpbiB0aGUgYXBwbGljYXRpb24ncyBleHRlcm5hbCBmaWxlcyBkaXJlY3RvcnlcbiAgICovXG4gIGRlc3RpbmF0aW9uSW5FeHRlcm5hbEZpbGVzRGlyPzogRGVzdGluYXRpb25EaXJlY3Rvcnk7XG4gIC8qKlxuICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlIHRvIGEgcGF0aCB3aXRoaW4gdGhlIHB1YmxpYyBleHRlcm5hbCBzdG9yYWdlIGRpcmVjdG9yeVxuICAgKi9cbiAgZGVzdGluYXRpb25JbkV4dGVybmFsUHVibGljRGlyPzogRGVzdGluYXRpb25EaXJlY3Rvcnk7XG4gIC8qKlxuICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlLlxuICAgKiBNdXN0IGJlIGEgZmlsZSBVUkkgdG8gYSBwYXRoIG9uIGV4dGVybmFsIHN0b3JhZ2UsIGFuZCB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBtdXN0IGhhdmUgdGhlIFdSSVRFX0VYVEVSTkFMX1NUT1JBR0UgcGVybWlzc2lvbi5cbiAgICovXG4gIGRlc3RpbmF0aW9uVXJpPzogc3RyaW5nO1xuICAvKipcbiAgICogQWRkIGFuIEhUVFAgaGVhZGVyIHRvIGJlIGluY2x1ZGVkIHdpdGggdGhlIGRvd25sb2FkIHJlcXVlc3QuIFRoZSBoZWFkZXIgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgKi9cbiAgaGVhZGVycz86IERvd25sb2FkSHR0cEhlYWRlcltdO1xufVxuXG4vKipcbiAqIEBuYW1lIERvd25sb2FkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gaXMgZGVzaWduZWQgdG8gc3VwcG9ydCBkb3dubG9hZGluZyBmaWxlcyB1c2luZyBBbmRyb2lkIERvd25sb2FkTWFuYWdlci5cbiAqXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEb3dubG9hZGVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kb3dubG9hZGVyL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZG93bmxvYWRlcjogRG93bmxvYWRlcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogICAgdmFyIHJlcXVlc3Q6IERvd25sb2FkUmVxdWVzdCA9IHtcbiAqICAgICAgICAgICB1cmk6IFlPVVJfVVJJLFxuICogICAgICAgICAgIHRpdGxlOiAnTXlEb3dubG9hZCcsXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246ICcnLFxuICogICAgICAgICAgIG1pbWVUeXBlOiAnJyxcbiAqICAgICAgICAgICB2aXNpYmxlSW5Eb3dubG9hZHNVaTogdHJ1ZSxcbiAqICAgICAgICAgICBub3RpZmljYXRpb25WaXNpYmlsaXR5OiBOb3RpZmljYXRpb25WaXNpYmlsaXR5LlZpc2libGVOb3RpZnlDb21wbGV0ZWQsXG4gKiAgICAgICAgICAgZGVzdGluYXRpb25JbkV4dGVybmFsRmlsZXNEaXI6IHtcbiAqICAgICAgICAgICAgICAgZGlyVHlwZTogJ0Rvd25sb2FkcycsXG4gKiAgICAgICAgICAgICAgIHN1YlBhdGg6ICdNeUZpbGUuYXBrJ1xuICogICAgICAgICAgIH1cbiAqICAgICAgIH07XG4gKlxuICpcbiAqICAgdGhpcy5kb3dubG9hZGVyLmRvd25sb2FkKHJlcXVlc3QpXG4gKiAgIFx0XHRcdC50aGVuKChsb2NhdGlvbjogc3RyaW5nKSA9PiBjb25zb2xlLmxvZygnRmlsZSBkb3dubG9hZGVkIGF0OicrbG9jYXRpb24pKVxuICogICBcdFx0XHQuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBOb3RpZmljYXRpb25WaXNpYmlsaXR5XG4gKiBIZWFkZXJcbiAqIERlc3RpbmF0aW9uRGlyZWN0b3J5XG4gKiBEb3dubG9hZEh0dHBIZWFkZXJcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEb3dubG9hZGVyJyxcbiAgcGx1Z2luOiAnaW50ZWdyYXRvci1jb3Jkb3ZhLXBsdWdpbi1kb3dubG9hZGVyJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLkRvd25sb2FkZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0x1a2EzMTMvaW50ZWdyYXRvci1jb3Jkb3ZhLXBsdWdpbi1kb3dubG9hZGVyLmdpdCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvd25sb2FkZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiAgU3RhcnRzIGEgbmV3IGRvd25sb2FkIGFuZCByZXR1cm5zIGxvY2F0aW9uIG9mIHRoZSBkb3dubG9hZGVkIGZpbGUgb24gY29tcGxldGlvblxuICAgKiAgQHBhcmFtIHJlcXVlc3Qge0Rvd25sb2FkUmVxdWVzdH1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZG93bmxvYWQocmVxdWVzdDogRG93bmxvYWRSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}